// Name: Bruno
// Last name: Vandekerkhove
// Student number: s0216676

vocabulary V_fixed {
    type X isa int
    type Y isa int
    type Number isa int
    type Pos constructed from { P(X, Y) }
    wall(Pos)
    lamp(Pos)
    lit(Pos)
    tip(Pos, Number)
}

vocabulary V_student {
    extern vocabulary V_fixed
    blocked(Pos,Pos) // Positions on the same row/column with a wall between them.
}

theory T : V_student {
    
    // Walls cannot have any lamps.
    !x[Pos]: wall(x) => ~lamp(x).
    
    // The number of lamps adjacent to walls matches the tips on those walls (if any).
    !wx,wy,n: tip(P(wx,wy),n) 
    	=> #{lx[X],ly[Y]: lamp(P(lx,ly)) & abs(wx-lx) + abs(ly-wy) = 1} = n.
    
    // Two positions are blocked if there's a wall between them.
    {
        !a,b,y: blocked(P(a,y),P(b,y)) <- ?w: wall(P(w,y)) & (a =< w =< b | b =< w =< a).
        !x,a,b: blocked(P(x,a),P(x,b)) <- ?w: wall(P(x,w)) & (a =< w =< b | b =< w =< a).
    }
    
    // A position is lit if there's a lamp in the same row or column which is not
    //	blocked by a wall.
    !a,b: lit(P(a,b)) <=> ?c,d:lamp(P(c,d)) & (a = c | b = d) & ~blocked(P(a,b),P(c,d)).
    
    // All cells without walls should be lit.
    !x: ~wall(x) => lit(x).
    
    // Lamps don't shine on each other
    ~?x,a,b: lamp(P(x,a)) & lamp(P(x,b)) & a > b & ~blocked(P(x,a),P(x,b)).
    ~?y,a,b: lamp(P(a,y)) & lamp(P(b,y)) & a > b & ~blocked(P(a,y),P(b,y)).
    
}

// For testing purposes (minimising number of lamps)
term MinimizeLamps : V_fixed { #{p: lamp(p)} }
vocabulary OutputVocabulary { extern V_fixed::lamp/1 
}

// Main procedure
procedure main() {
    model = onemodel(T, S10, V_fixed)
    initVisualization()
    visualizeLightUp(model)
    // printmodels(minimize(T, S5, MinimizeLamps, OutputVocabulary))
}

include "visualize_lightup.idp"
include "lightup_structures.idp"