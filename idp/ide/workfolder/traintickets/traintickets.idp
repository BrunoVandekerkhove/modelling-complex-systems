// Name: Bruno
// Last name: Vandekerkhove
// Student number: s0216676

vocabulary V_fixed {
    type Station
    type Train
    type Pass isa int
    type Stop isa int
    type Prize isa int
    type Age isa int
    type TicketType constructed from { Standard, Youth, Senior }
    type Ticket constructed from { T(TicketType, Train, Station, Station) }
    track(Station, Station)
    passes(Train, Station, Pass)
    stopsAt(Train, Station, Stop)
    hasTicket(Ticket)
    paid(Ticket, Prize)
    start : Station
    end : Station
    age : Age
}

vocabulary V_student {
    extern vocabulary V_fixed
    
    requiredType: TicketType // The required ticket type for the passenger.
    
    
    price(Ticket): Prize // The price of each ticket.
    
    
}

theory T : V_student {
    
    // The tickets a passenger acquired should conform to the specification.
    requiredType = Youth & age < 26 
    	| requiredType = Senior & age > 65 
    	| requiredType = Standard & 26 =< age =< 65.
    !tt,t,s1,s2: hasTicket(T(tt,t,s1,s2)) => tt = requiredType.
    
    // If a train passes at s2 right after s1 then there should 
    //	be a corresponding track.
    !t,s1,s2,p: passes(t,s1,p) & passes(t,s2,p) => track(s1,s2).
    
    // 
    !t,s,p: passes(t,s,p) & Pass(p-1) => ?s2: passes(t,s2,p-1).
    !t,s,st: stopsAt(t,s,st) & Stop(st-1) => ?s2: stopsAt(t,s2,st-1).
    
    // The price of a ticket should conform to the specification
    max{t: passes(t, s, p): p}
    
    // The passenger should be able to get onto trains that 
    //	pass through start/end.
    
    
    // There are no two different tickets for the same train
    !t:?=<1tt,s1,s2: hasTicket(T(tt,t,s1,s2)).
    
}

procedure main() {
    model = onemodel(T, S1, V_fixed)
    print(model)
}

include "traintickets_structures.idp"