// Name: Bruno
// Last name: Vandekerkhove
// Student number: s0216676

vocabulary V_fixed {
    type Station
    type Train
    type Pass isa int
    type Stop isa int
    type Prize isa int
    type Age isa int
    type TicketType constructed from { Standard, Youth, Senior }
    type Ticket constructed from { T(TicketType, Train, Station, Station) }
    track(Station, Station)
    passes(Train, Station, Pass)
    stopsAt(Train, Station, Stop)
    hasTicket(Ticket)
    paid(Ticket, Prize)
    start : Station
    end : Station
    age : Age
}

vocabulary V_student {
    extern vocabulary V_fixed
    
    prize(Ticket): Prize // The price of the ticket.
    
    
}

theory T : V_student {
    
    // The tickets a passenger acquired should conform to the specification.
    !t,a,b,c: hasTicket(T(t,a,b,c)) => 
    	t = Youth & age < 26 
    	| t = Senior & age > 65 
    	| t = Standard & 26 =< age =< 65.
    
    // The price of a ticket should conform to the specification
    
    
    
    ~?t,s,p: passes(t,s,p) & Pass(p-1) & ~stopsAt(t,s,p-1).
    ~?t,s,st: stopsAt(t,s,st) & Stop(st-1) & ~stopsAt(t,s,st-1).
    
}

procedure main() {
    model = onemodel(T, S1, V_fixed)
    print(model)
}

include "traintickets_structures.idp"