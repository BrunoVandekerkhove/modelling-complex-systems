vocabulary V {
    type Time isa nat
    Start : Time
    partial Next(Time) : Time

    type Plate

    // Fluents
    clean(Time, Plate)
    I_clean(Plate)
    C_clean(Time, Plate)
    Cn_clean(Time, Plate)

    // Actions
    cleanPlate(Time, Plate)
    usePlate(Time, Plate)
}

structure S : V {
    Time = {0..5}
    Plate = { P1; P2; P3; P4; }
    I_clean = { P1; P2; P3; P4; }
}


theory timeTheo : V {
    {
        Start = MIN[:Time].
        ! t[Time]: Next(t) = t + 1 <- Time(t + 1).
    }
}

theory T : V {
    // Preconditions

    { // Successor State Axiom

    }

    { // Causes

    }

    // (Maybe, you can only clean one plate at a time?)
}

theory allDirty : V {
    // Is it possible to make all your plates dirty?
}

include <mx>

procedure main() {
    S = calculatedefinitions(timeTheo, S)
    local allconstraints = merge(T, allDirty)
    print("This is the merged theory:")
    print(allconstraints)
    print("Searching for a model")
    print(onemodel(allconstraints, S))
}
