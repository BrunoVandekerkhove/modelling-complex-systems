include "idpd3/idpd3_voc.idp"
include <table_utils>

vocabulary V_visual {
    extern vocabulary idpd3::V_out
    extern vocabulary V_fixed
    extern V_fixed::P/2:1
    toKey(X, Y) : key
    toText(X, Y) : key
    toString(Number) : label
}

theory T_visual : V_visual {
    {
        ! x[X] y[Y]: d3_type(1, toKey(x, y)) = rect.
        ! x[X] y[Y]: d3_rect_width(1, toKey(x, y)) = 5.
        ! x[X] y[Y]: d3_rect_height(1, toKey(x, y)) = 5.
        ! x[X] y[Y]: d3_color(1, toKey(x, y)) = "cyan" <- water(P(x, y)) & ~land(P(x, y)).
        ! x[X] y[Y]: d3_color(1, toKey(x, y)) = "silver" <- ~water(P(x, y)) & ~land(P(x, y)).
        ! x[X] y[Y]: d3_color(1, toKey(x, y)) = "beige" <- ~water(P(x, y)) & land(P(x, y)).
        ! x[X] y[Y]: d3_color(1, toKey(x, y)) = "red" <- water(P(x, y)) & land(P(x, y)).
        ! x[X] y[Y]: d3_x(1, toKey(x, y)) = 5 + 5 * (x - MIN[:X]).
        ! x[X] y[Y]: d3_y(1, toKey(x, y)) = 5 + 5 * (y - MIN[:Y]).
        ! x[X] y[Y]: d3_order(1, toKey(x, y)) = 0.

        ! x[X] y[Y]: d3_type(1, toText(x, y)) = text <- ? n[Number]: islandSize(P(x, y), n).
        ! x[X] y[Y]: d3_x(1, toText(x, y)) = 5 + 5 * (x - MIN[:X]) <- ? n[Number]: islandSize(P(x, y), n).
        ! x[X] y[Y]: d3_y(1, toText(x, y)) = 6 + 5 * (y - MIN[:Y]) <- ? n[Number]: islandSize(P(x, y), n).
        ! x[X] y[Y]: d3_text_size(1, toText(x, y)) = 3 <- ? n[Number]: islandSize(P(x, y), n).
        ! x[X] y[Y] n[Number]: d3_text_label(1, toText(x, y)) = toString(n) <- islandSize(P(x, y), n).
        ! x[X] y[Y]: d3_color(1, toText(x, y)) = "white" <- water(P(x, y)) & ? n[Number]: islandSize(P(x, y), n).
        ! x[X] y[Y]: d3_color(1, toText(x, y)) = "black" <- land(P(x, y)) & ~water(P(x, y)) & ? n[Number]: islandSize(P(x, y), n).
        ! x[X] y[Y]: d3_order(1, toText(x, y)) = 1 <- ? n[Number]: islandSize(P(x, y), n).
    }

    ! t[time]: d3_width(t) = 5 * (max(MAX[:X] - MIN[:X], MAX[:Y] - MIN[:Y]) + 2).
    ! t[time]: d3_height(t) = 5 * (max(MAX[:X] - MIN[:X], MAX[:Y] - MIN[:Y]) + 2).
}

procedure toKey(x, y) {
    return "pos"..tostring(x)..":"..tostring(y)
}

procedure toText(x, y) {
    return "text"..tostring(x)..":"..tostring(y)
}

procedure toString(n) {
    return tostring(n)
}

structure visualStruct : V_visual {
    X = {0}
    Y = {0}
    Number = {0}
    key = { "text0:0"; "pos0:0"; }
    image = {""}
    time = {1}
    width = {0}
    height = {0}
    order = {0..1}
    toKey = procedure toKey
    toText = procedure toText
    toString = procedure toString
    label = { "0"; }
    color = { "white"; "black"; "red"; "silver"; "beige"; "cyan"}
}

procedure visualizeNurikabe(struct) {
    if struct == nil then
        print("A nil structure provided, most likely as a result from unsat.")
        return
    end
    local ti = os.clock()
    local newStruct = clone(struct)
    setvocabulary(newStruct, V_visual)
    newStruct[V_visual::time.type] = visualStruct[V_visual::time.type]
    local xmin = math.min(unpack(totable(newStruct[V_fixed::X.type])))
    local xmax = math.max(unpack(totable(newStruct[V_fixed::X.type])))
    local ymin = math.min(unpack(totable(newStruct[V_fixed::Y.type])))
    local ymax = math.max(unpack(totable(newStruct[V_fixed::Y.type])))
    local m = math.max(xmax - xmin, ymax - ymin)
    newStruct[V_visual::width.type] = range(0, 5 * (m + 2))
    newStruct[V_visual::height.type] = range(0, 5 * (m + 2))
    local key = {}
    for k,v in pairs(totable(newStruct[V_fixed::X.type])) do
        for l,w in pairs(totable(newStruct[V_fixed::Y.type])) do
            table.insert(key, toKey(v, w))
            table.insert(key, toText(v, w))
        end
    end
    newStruct[idpd3::V_types::key.type] = key

    local label = {}
    for k,v in pairs(totable(newStruct[V_fixed::Number.type])) do
        table.insert(label, toString(v))
    end
    newStruct[idpd3::V_types::label.type] = label
    newStruct[idpd3::V_types::color.type] = visualStruct[idpd3::V_types::color.type]
    newStruct[idpd3::V_types::order.type] = visualStruct[idpd3::V_types::order.type]


    newStruct[V_visual::toKey] = visualStruct[V_visual::toKey]
    newStruct[V_visual::toText] = visualStruct[V_visual::toText]
    newStruct[V_visual::toString] = visualStruct[V_visual::toString]

    local ntime = os.clock() + 0.1
    repeat until os.clock() > ntime
    local model = onemodel(T_visual, newStruct)
    idpd3C.visualise(model)
    ntime = os.clock() + 0.1
    repeat until os.clock() > ntime
    local secs = os.clock() - ti + 0.2
    print("Visualization took "..tostring(secs).." seconds.")
}

procedure initVisualization() {
    idpd3B = idpd3
    idpd3.init_idpd3()
    idpd3C = idpd3
    idpd3 = idpd3B
}
